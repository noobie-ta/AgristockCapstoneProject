rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Posts: anyone can read, only authenticated users can create
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null 
                            && resource.data.userId == request.auth.uid;
      // Allow any authenticated user to update favoriteCount
      allow update: if request.auth != null && 
        request.writeFields.hasOnly(['favoriteCount']);
    }
    
    // Users: allow reading any user profile (for seller info), but only write own profile
    match /users/{userId} {
      // Allow authenticated users to read any user profile (for seller information)
      allow read: if request.auth != null;
      // Only allow users to write their own profile
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Users can manage their own favorites subcollection
      match /favorites/{favoriteId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Global favorites collection (if used)
    match /favorites/{favoriteId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null;
    }
    
    // Chats collection - allow authenticated users to read/write chats
    // The whereArrayContains query will filter to only chats they participate in
    match /chats/{chatId} {
      allow read, write: if request.auth != null;
      allow create: if request.auth != null;
    }
    
    // Messages collection - allow authenticated users to read/write messages
    // The whereEqualTo("chatId", chatId) query will filter appropriately
    match /messages/{messageId} {
      allow read, write: if request.auth != null;
      allow create: if request.auth != null;
    }
  }
}